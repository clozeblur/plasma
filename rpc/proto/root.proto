syntax = "proto3";
package pb;

service Root {
    rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse) {
    }
    rpc GetOutputs (GetOutputsRequest) returns (GetOutputsResponse) {
    }
    rpc GetBlock (GetBlockRequest) returns (GetBlockResponse) {
    }
    rpc Send (SendRequest) returns (SendResponse) {
    }
    rpc Confirm (ConfirmRequest) returns (ConfirmedTransaction) {
    }
    rpc GetConfirmations(GetConfirmationsRequest) returns (GetConfirmationsResponse) {
    }
    rpc BlockHeight (EmptyRequest) returns (BlockHeightResponse) {
    }
}

message EmptyRequest {
}

message BigInt {
    string hex = 1;
}

message Input {
    bytes owner = 1;
    BigInt depositNonce = 2;
    BigInt blockNum = 3;
    BigInt txIdx = 4;
    BigInt outIdx = 5;
}

message Output {
    bytes newOwner = 1;
    BigInt amount = 2;
    BigInt depositNonce = 3;
}

message BlockHeader {
    bytes merkleRoot = 1;
    bytes rlpMerkleRoot = 2;
    bytes prevHash = 3;
    uint64 number = 4;
}

message Block {
    BlockHeader header = 1;
    bytes hash = 2;
}

message Transaction {
    Input input0 = 1;
    bytes sig0 = 2;
    Input input1 = 3;
    bytes sig1 = 4;
    Output output0 = 5;
    Output output1 = 6;
    BigInt fee = 7;
    BigInt blockNum = 8;
    BigInt txIdx = 9;
}

message ConfirmedTransaction {
    Transaction transaction = 1;
    repeated bytes signatures = 2;
}

message GetBalanceRequest {
    bytes address = 1;
}

message GetBalanceResponse {
    BigInt balance = 1;
}

message GetOutputsRequest {
    bytes address = 1;
    bool spendable = 2;
}

message GetOutputsResponse {
    repeated ConfirmedTransaction confirmedTransactions = 1;
}

message GetBlockRequest {
    uint64 number = 1;
}

message GetBlockResponse {
    Block block = 1;
    repeated ConfirmedTransaction confirmedTransactions = 2;
    BlockMeta metadata = 3;

    message BlockMeta {
        uint64 createdAt = 1;
    }
}

message SendRequest {
    ConfirmedTransaction confirmed = 1;
}

message SendResponse {
    ConfirmedTransaction confirmed = 1;
    TransactionInclusion inclusion = 2;
}

message TransactionInclusion {
    bytes merkleRoot = 1;
    uint64 blockNumber = 2;
    uint32 transactionIndex = 3;
}

message ConfirmRequest {
    uint64 blockNumber = 1;
    uint32 transactionIndex = 2;
    bytes authSig0 = 3;
    bytes authSig1 = 4;
}

message GetConfirmationsRequest {
    bytes sig = 1;
    uint64 nonce = 2;
    uint64 blockNumber = 3;
    uint32 transactionIndex = 4;
    uint32 outputIndex = 5;
}

message GetConfirmationsResponse {
    bytes authSig0 = 1;
    bytes authSig1 = 2;
}

message BlockHeightResponse {
    uint64 height = 1;
}